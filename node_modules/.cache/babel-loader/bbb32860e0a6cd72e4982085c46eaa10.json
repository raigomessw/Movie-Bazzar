{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\raibr\\\\Documents\\\\Meus Projetos\\\\Movie-Bazzar\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\raibr\\\\Documents\\\\Meus Projetos\\\\Movie-Bazzar\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport firebase from \"firebase/compat/app\";\nimport db from \"./firebaseConfig\"; // import { getAuth, signInAnonymously } from \"firebase/auth\";\n// import { GoogleAuthProvider } from \"firebase/auth\";\n\nimport { getAuth, linkWithCredential } from \"firebase/auth\";\n\nvar saveComm = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n    var auth;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            //await setDoc(doc(firestore , \"comments\" ,`${Date.now()}`), data, {merge : true})\n            //const res = await  db.collection(\"comments\").doc(`${Date.now()}`).set(data);\n            // const credential = GoogleAuthProvider.credential(\n            // googleUser.getAuthResponse().id_token);\n            auth = getAuth();\n            linkWithCredential(auth.currentUser, credential).then(function (usercred) {\n              var user = usercred.user;\n              console.log(\"Anonymous account successfully upgraded\", user);\n            }).catch(function (error) {\n              console.log(\"Error upgrading anonymous account\", error);\n            });\n            /*const auth = getAuth();\r\n            signInAnonymously(auth)\r\n              .then(() => {\r\n                // Signed in..\r\n              })\r\n              .catch((error) => {\r\n                const errorCode = error.code;\r\n                const errorMessage = error.message;\r\n                // ...\r\n              });*/\n\n            db.collection(\"comments\").doc(\"\".concat(Date.now())).set(data).then(function () {\n              console.log(\"Document successfully written!\");\n            }).catch(function (error) {\n              console.error(\"Error writing document: \", error);\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function saveComm(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // onAuthStateChanged(auth, (user) => {\n//   if (user) {\n//     auth.uid.signInAnonymously === true\n//     // User is signed in, see docs for a list of available properties\n//     // https://firebase.google.com/docs/reference/js/firebase.User\n//     const uid = user.uid;\n//   } else {\n//     auth.signInAnonymously === false\n//     // User is signed out\n// }\n\n\nexport default saveComm; // export const fetchcomments = async(film) => {\n//     db.collection(\"comments\").where(\"filmId\", \"==\", film)\n//     .onSnapshot((querySnapshot) => {\n//         var filmcoms = [];\n//         querySnapshot.forEach((doc) => {\n//             console.log(\"doc is \" , doc)\n//             filmcoms.push(doc.data());\n//         });\n//         console.log(\"List of  comments \", filmcoms );\n//         return filmcoms\n//     });\n//     }","map":{"version":3,"sources":["C:/Users/raibr/Documents/Meus Projetos/Movie-Bazzar/src/features/firebaseFunctions.js"],"names":["firebase","db","getAuth","linkWithCredential","saveComm","data","auth","currentUser","credential","then","usercred","user","console","log","catch","error","collection","doc","Date","now","set"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CACA;AACA;;AACA,SAASC,OAAT,EAAkBC,kBAAlB,QAA4C,eAA5C;;AAGA,IAAMC,QAAQ;AAAA,sEAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACf;AAEA;AAEA;AACA;AACMC,YAAAA,IAPS,GAOFJ,OAAO,EAPL;AAQfC,YAAAA,kBAAkB,CAACG,IAAI,CAACC,WAAN,EAAmBC,UAAnB,CAAlB,CACCC,IADD,CACM,UAACC,QAAD,EAAc;AAClB,kBAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuDF,IAAvD;AACD,aAJD,EAIGG,KAJH,CAIS,UAACC,KAAD,EAAW;AAClBH,cAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDE,KAAjD;AACD,aAND;AAQA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGEd,YAAAA,EAAE,CAACe,UAAH,CAAc,UAAd,EACGC,GADH,WACUC,IAAI,CAACC,GAAL,EADV,GAEGC,GAFH,CAEOf,IAFP,EAGGI,IAHH,CAGQ,YAAM;AACVG,cAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD,aALH,EAMGC,KANH,CAMS,UAACC,KAAD,EAAW;AAChBH,cAAAA,OAAO,CAACG,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACD,aARH;;AA5Be;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARX,QAAQ;AAAA;AAAA;AAAA,GAAd,C,CAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeA,QAAf,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import firebase from \"firebase/compat/app\";\r\nimport db from \"./firebaseConfig\";\r\n// import { getAuth, signInAnonymously } from \"firebase/auth\";\r\n// import { GoogleAuthProvider } from \"firebase/auth\";\r\nimport { getAuth, linkWithCredential } from \"firebase/auth\";\r\n\r\n\r\nconst saveComm = async (data) => {\r\n  //await setDoc(doc(firestore , \"comments\" ,`${Date.now()}`), data, {merge : true})\r\n\r\n  //const res = await  db.collection(\"comments\").doc(`${Date.now()}`).set(data);\r\n\r\n  // const credential = GoogleAuthProvider.credential(\r\n  // googleUser.getAuthResponse().id_token);\r\n  const auth = getAuth();\r\n  linkWithCredential(auth.currentUser, credential)\r\n  .then((usercred) => {\r\n    const user = usercred.user;\r\n    console.log(\"Anonymous account successfully upgraded\", user);\r\n  }).catch((error) => {\r\n    console.log(\"Error upgrading anonymous account\", error);\r\n  });\r\n\r\n  /*const auth = getAuth();\r\n  signInAnonymously(auth)\r\n    .then(() => {\r\n      // Signed in..\r\n    })\r\n    .catch((error) => {\r\n      const errorCode = error.code;\r\n      const errorMessage = error.message;\r\n      // ...\r\n    });*/\r\n\r\n\r\n  db.collection(\"comments\")\r\n    .doc(`${Date.now()}`)\r\n    .set(data)\r\n    .then(() => {\r\n      console.log(\"Document successfully written!\");\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error writing document: \", error);\r\n    });\r\n\r\n};\r\n// onAuthStateChanged(auth, (user) => {\r\n//   if (user) {\r\n//     auth.uid.signInAnonymously === true\r\n//     // User is signed in, see docs for a list of available properties\r\n//     // https://firebase.google.com/docs/reference/js/firebase.User\r\n//     const uid = user.uid;\r\n//   } else {\r\n//     auth.signInAnonymously === false\r\n//     // User is signed out\r\n// }\r\nexport default saveComm;\r\n\r\n// export const fetchcomments = async(film) => {\r\n\r\n//     db.collection(\"comments\").where(\"filmId\", \"==\", film)\r\n//     .onSnapshot((querySnapshot) => {\r\n//         var filmcoms = [];\r\n//         querySnapshot.forEach((doc) => {\r\n//             console.log(\"doc is \" , doc)\r\n//             filmcoms.push(doc.data());\r\n//         });\r\n//         console.log(\"List of  comments \", filmcoms );\r\n//         return filmcoms\r\n//     });\r\n\r\n//     }\r\n"]},"metadata":{},"sourceType":"module"}